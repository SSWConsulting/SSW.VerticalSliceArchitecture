# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

##########################################################################################
#
# CODE STYLE RULES
#
##########################################################################################

# All files
[*]
indent_style = space

# Xml files
[*.{xml,yml,json,csproj,props}]
indent_size = 2
tab_width = 2

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
tab_width = 4

# New line preferences
insert_final_newline = false

#### .NET Coding Conventions ####
[*.{cs,vb}]

# Suppressed warnings
dotnet_diagnostic.CA1848.severity = suggestion

resharper_csharp_force_attribute_style = join
resharper_csharp_keep_existing_attribute_arrangement = true

# Organize usings
dotnet_separate_import_directive_groups = false
dotnet_sort_system_directives_first = false
file_header_template = unset

# this. and Me. preferences
dotnet_style_qualification_for_event = false:warning
dotnet_style_qualification_for_field = false:warning
dotnet_style_qualification_for_method = false:warning
dotnet_style_qualification_for_property = false:warning

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning
dotnet_style_predefined_type_for_member_access = true:warning

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning

# Expression-level preferences
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_collection_initializer = true:suggestion # leave as suggestion
dotnet_style_explicit_tuple_names = true:suggestion # leave as suggestion
dotnet_style_null_propagation = true:warning
dotnet_style_object_initializer = true:warning
dotnet_style_operator_placement_when_wrapping = beginning_of_line
dotnet_style_prefer_auto_properties = true:warning
dotnet_style_prefer_compound_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_assignment = true:warning
dotnet_style_prefer_conditional_expression_over_return = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
dotnet_style_prefer_simplified_boolean_expressions = true:warning
dotnet_style_prefer_simplified_interpolation = true:warning

# Field preferences
dotnet_style_readonly_field = true:warning

# Parameter preferences
dotnet_code_quality_unused_parameters = all:warning

# Suppression preferences
dotnet_remove_unnecessary_suppression_exclusions = none

#### C# Coding Conventions ####
[*.cs]

csharp_style_prefer_primary_constructors = false:silent

# var preferences
csharp_style_var_elsewhere = true:suggestion # leave as suggestion
csharp_style_var_for_built_in_types = true:suggestion # leave as suggestion
csharp_style_var_when_type_is_apparent = true:suggestion # leave as suggestion

# Expression-bodied members
csharp_style_expression_bodied_accessors = true:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_indexers = true:silent
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = when_on_single_line:warning
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:warning

# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:warning
csharp_style_prefer_not_pattern = true:warning
csharp_style_prefer_pattern_matching = true:warning
csharp_style_prefer_switch_expression = true:warning

# Null-checking preferences
csharp_style_conditional_delegate_call = true:warning

# Modifier preferences
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:silent

# Code-block preferences
csharp_prefer_braces = when_multiline:suggestion
csharp_prefer_simple_using_statement = true:warning

# Expression-level preferences
csharp_prefer_simple_default_expression = true:suggestion # leave as suggestion
csharp_style_deconstructed_variable_declaration = true:warning
csharp_style_inlined_variable_declaration = true:warning
csharp_style_pattern_local_over_anonymous_function = true:warning
csharp_style_prefer_index_operator = true:warning
csharp_style_prefer_range_operator = true:warning
csharp_style_throw_expression = true:warning
csharp_style_unused_value_assignment_preference = discard_variable:warning
csharp_style_unused_value_expression_statement_preference = discard_variable:silent

# File scoped namespaces
csharp_style_namespace_declarations = file_scoped:silent

# 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning

#### C# Formatting Rules ####

# New line preferences
csharp_new_line_before_catch = true
csharp_new_line_before_else = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_open_brace = all
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_labels = one_less_than_current
csharp_indent_switch_labels = true

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = true
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent

#### Naming styles ####
[*.{cs,vb}]

# Naming rules

dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.symbols = types_and_namespaces
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.interfaces_should_be_ipascalcase.severity = suggestion
dotnet_naming_rule.interfaces_should_be_ipascalcase.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_ipascalcase.style = ipascalcase

dotnet_naming_rule.type_parameters_should_be_tpascalcase.severity = suggestion
dotnet_naming_rule.type_parameters_should_be_tpascalcase.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_tpascalcase.style = tpascalcase

dotnet_naming_rule.methods_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.methods_should_be_pascalcase.symbols = methods
dotnet_naming_rule.methods_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.properties_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.properties_should_be_pascalcase.symbols = properties
dotnet_naming_rule.properties_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.events_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.events_should_be_pascalcase.symbols = events
dotnet_naming_rule.events_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_variables_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_variables_should_be_camelcase.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camelcase.style = camelcase

dotnet_naming_rule.local_constants_should_be_camelcase.severity = suggestion
dotnet_naming_rule.local_constants_should_be_camelcase.symbols = local_constants
dotnet_naming_rule.local_constants_should_be_camelcase.style = camelcase

dotnet_naming_rule.parameters_should_be_camelcase.severity = suggestion
dotnet_naming_rule.parameters_should_be_camelcase.symbols = parameters
dotnet_naming_rule.parameters_should_be_camelcase.style = camelcase

dotnet_naming_rule.public_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_fields_should_be_pascalcase.symbols = public_fields
dotnet_naming_rule.public_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_fields_should_be__camelcase.severity = suggestion
dotnet_naming_rule.private_fields_should_be__camelcase.symbols = private_fields
dotnet_naming_rule.private_fields_should_be__camelcase.style = _camelcase

dotnet_naming_rule.private_static_fields_should_be_s_camelcase.severity = suggestion
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.style = s_camelcase

dotnet_naming_rule.public_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.symbols = public_constant_fields
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_constant_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.symbols = private_constant_fields
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.symbols = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.symbols = private_static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.enums_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.enums_should_be_pascalcase.symbols = enums
dotnet_naming_rule.enums_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_functions_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascalcase.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.non_field_members_should_be_pascalcase.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascalcase.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascalcase.style = pascalcase

# Symbol specifications

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interfaces.required_modifiers =

dotnet_naming_symbols.enums.applicable_kinds = enum
dotnet_naming_symbols.enums.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enums.required_modifiers =

dotnet_naming_symbols.events.applicable_kinds = event
dotnet_naming_symbols.events.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.events.required_modifiers =

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.methods.required_modifiers =

dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.properties.required_modifiers =

dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_fields.required_modifiers =

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_fields.required_modifiers =

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_fields.required_modifiers = static

dotnet_naming_symbols.types_and_namespaces.applicable_kinds = namespace, class, struct, interface, enum
dotnet_naming_symbols.types_and_namespaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types_and_namespaces.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.type_parameters.applicable_kinds = namespace
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers =

dotnet_naming_symbols.private_constant_fields.applicable_kinds = field
dotnet_naming_symbols.private_constant_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_constant_fields.required_modifiers = const

dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = local
dotnet_naming_symbols.local_variables.required_modifiers =

dotnet_naming_symbols.local_constants.applicable_kinds = local
dotnet_naming_symbols.local_constants.applicable_accessibilities = local
dotnet_naming_symbols.local_constants.required_modifiers = const

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers =

dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_functions.applicable_accessibilities = *
dotnet_naming_symbols.local_functions.required_modifiers =

# Naming styles

dotnet_naming_style.pascalcase.required_prefix =
dotnet_naming_style.pascalcase.required_suffix =
dotnet_naming_style.pascalcase.word_separator =
dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.ipascalcase.required_prefix = I
dotnet_naming_style.ipascalcase.required_suffix =
dotnet_naming_style.ipascalcase.word_separator =
dotnet_naming_style.ipascalcase.capitalization = pascal_case

dotnet_naming_style.tpascalcase.required_prefix = T
dotnet_naming_style.tpascalcase.required_suffix =
dotnet_naming_style.tpascalcase.word_separator =
dotnet_naming_style.tpascalcase.capitalization = pascal_case

dotnet_naming_style._camelcase.required_prefix = _
dotnet_naming_style._camelcase.required_suffix =
dotnet_naming_style._camelcase.word_separator =
dotnet_naming_style._camelcase.capitalization = camel_case

dotnet_naming_style.camelcase.required_prefix =
dotnet_naming_style.camelcase.required_suffix =
dotnet_naming_style.camelcase.word_separator =
dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.s_camelcase.required_prefix = s_
dotnet_naming_style.s_camelcase.required_suffix =
dotnet_naming_style.s_camelcase.word_separator =
dotnet_naming_style.s_camelcase.capitalization = camel_case

# IDE Rule Severity

# IDE0001: Simplify Names
dotnet_diagnostic.IDE0001.severity = warning

# IDE0002: Simplify Member Access
dotnet_diagnostic.IDE0002.severity = warning

# IDE0003: Remove qualification
dotnet_diagnostic.IDE0003.severity = warning

# IDE0004: Remove Unnecessary Cast
dotnet_diagnostic.IDE0004.severity = warning

# IDE0005: Using directive is unnecessary.
#
# To enable this rule on build, you need to enable XML documentation comments for the project.
# Add the following to each project file. See this issue for more details:
# https://github.com/dotnet/roslyn/issues/41640
#
# <ProjectGroup>
#   ...
#   <GenerateDocumentationFile>true</GenerateDocumentationFile>
#   <NoWarn>$(NoWarn);1591</NoWarn>
# </ProjectGroup>
dotnet_diagnostic.IDE0005.severity = suggestion

# IDE0007: Use implicit type
dotnet_diagnostic.IDE0007.severity = suggestion # leave as suggestion

# IDE0008: Use explicit type
dotnet_diagnostic.IDE0008.severity = suggestion # leave as suggestion

# IDE0009: Member access should be qualified.
dotnet_diagnostic.IDE0009.severity = none

# IDE0010: Add missing cases
dotnet_diagnostic.IDE0010.severity = warning

# IDE0011: Add braces
dotnet_diagnostic.IDE0011.severity = warning

# IDE0016: Use 'throw' expression
dotnet_diagnostic.IDE0016.severity = warning

# IDE0017: Simplify object initialization
dotnet_diagnostic.IDE0017.severity = suggestion # leave as suggestion

# IDE0018: Inline variable declaration
dotnet_diagnostic.IDE0018.severity = warning

# IDE0019: Use pattern matching
dotnet_diagnostic.IDE0019.severity = warning

# IDE0020: Use pattern matching
dotnet_diagnostic.IDE0020.severity = warning

# IDE0021: Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = silent

# IDE0022: Use expression body for methods
dotnet_diagnostic.IDE0022.severity = silent

# IDE0023: Use expression body for operators
dotnet_diagnostic.IDE0023.severity = silent

# IDE0024: Use expression body for operators
dotnet_diagnostic.IDE0024.severity = silent

# IDE0025: Use expression body for properties
dotnet_diagnostic.IDE0025.severity = warning

# IDE0026: Use expression body for indexers
dotnet_diagnostic.IDE0026.severity = silent

# IDE0027: Use expression body for accessors
dotnet_diagnostic.IDE0027.severity = silent

# IDE0028: Simplify collection initialization
dotnet_diagnostic.IDE0028.severity = suggestion # leave as suggestion

# IDE0029: Use coalesce expression
dotnet_diagnostic.IDE0029.severity = warning

# IDE0030: Use coalesce expression
dotnet_diagnostic.IDE0030.severity = warning

# IDE0031: Use null propagation
dotnet_diagnostic.IDE0031.severity = warning

# IDE0032: Use auto property
dotnet_diagnostic.IDE0032.severity = warning

# IDE0033: Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = warning

# IDE0034: Simplify 'default' expression
dotnet_diagnostic.IDE0034.severity = warning

# IDE0035: Unreachable code detected
dotnet_diagnostic.IDE0035.severity = warning

# IDE0036: Order modifiers
dotnet_diagnostic.IDE0036.severity = silent

# IDE0037: Use inferred member name
dotnet_diagnostic.IDE0037.severity = warning

# IDE0039: Use local function
dotnet_diagnostic.IDE0039.severity = warning

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# IDE0041: Use 'is null' check
dotnet_diagnostic.IDE0041.severity = warning

# IDE0042: Deconstruct variable declaration
dotnet_diagnostic.IDE0042.severity = warning

# IDE0044: Add readonly modifier
dotnet_diagnostic.IDE0044.severity = warning

# IDE0045: Convert to conditional expression
dotnet_diagnostic.IDE0045.severity = warning

# IDE0046: Convert to conditional expression
dotnet_diagnostic.IDE0046.severity = suggestion # leave as suggestion

# IDE0047: Remove unnecessary parentheses
dotnet_diagnostic.IDE0047.severity = warning

# IDE0048: Add parentheses for clarity
dotnet_diagnostic.IDE0048.severity = warning

# IDE0049: Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0049.severity = warning

# IDE0050: Convert to tuple
dotnet_diagnostic.IDE0050.severity = suggestion # leave as suggestion

# IDE0051: Remove unused private members
dotnet_diagnostic.IDE0051.severity = warning

# IDE0052: Remove unread private members
dotnet_diagnostic.IDE0052.severity = warning

# IDE0053: Use expression body for lambdas
dotnet_diagnostic.IDE0053.severity = suggestion

# IDE0054: Use compound assignment
dotnet_diagnostic.IDE0054.severity = warning

# IDE0055: Fix formatting
dotnet_diagnostic.IDE0055.severity = warning

# IDE0056: Use index operator
dotnet_diagnostic.IDE0056.severity = warning

# IDE0057: Use range operator
dotnet_diagnostic.IDE0057.severity = warning

# IDE0058: Expression value is never used
dotnet_diagnostic.IDE0058.severity = silent

# IDE0059: Unnecessary assignment of a value
dotnet_diagnostic.IDE0059.severity = warning

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning

# IDE0061: Use expression body for local functions
dotnet_diagnostic.IDE0061.severity = warning

# IDE0062: Make local function 'static'
dotnet_diagnostic.IDE0062.severity = warning

# IDE0063: Use simple 'using' statement
dotnet_diagnostic.IDE0063.severity = warning

# IDE0065: Misplaced using directive
dotnet_diagnostic.IDE0065.severity = warning

# IDE0066: Convert switch statement to expression
dotnet_diagnostic.IDE0066.severity = warning

# IDE0070: Use 'System.HashCode'
dotnet_diagnostic.IDE0070.severity = warning

# IDE0071: Simplify interpolation
dotnet_diagnostic.IDE0071.severity = warning

# IDE0072: Add missing cases
dotnet_diagnostic.IDE0072.severity = suggestion

# IDE0073: The file header is missing or not located at the top of the file
dotnet_diagnostic.IDE0073.severity = none

# IDE0074: Use compound assignment
dotnet_diagnostic.IDE0074.severity = warning

# IDE0075: Simplify conditional expression
dotnet_diagnostic.IDE0075.severity = warning

# IDE0076: Invalid global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0076.severity = warning

# IDE0077: Avoid legacy format target in 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0077.severity = warning

# IDE0078: Use pattern matching
dotnet_diagnostic.IDE0078.severity = warning

# IDE0079: Remove unnecessary suppression
dotnet_diagnostic.IDE0079.severity = warning

# IDE0080: Remove unnecessary suppression operator
dotnet_diagnostic.IDE0080.severity = warning

# IDE0082: 'typeof' can be converted  to 'nameof'
dotnet_diagnostic.IDE0082.severity = warning

# IDE0083: Use pattern matching
dotnet_diagnostic.IDE0083.severity = warning

# IDE1005: Delegate invocation can be simplified.
dotnet_diagnostic.IDE1005.severity = warning

# IDE1006: Naming Styles
dotnet_diagnostic.IDE1006.severity = warning

# IDE0100: Remove unnecessary equality operator
dotnet_diagnostic.IDE0100.severity = warning

# IDE0110: Remove unnecessary discard
dotnet_diagnostic.IDE0110.severity = warning
dotnet_diagnostic.IDE0161.severity=warning

##########################################################################################
#
# CODE QUALITY RULES
#
##########################################################################################

# NOTE: This was copied from microsoft.codeanalysis.netanalyzers\5.0.1\editorconfig\AllRulesDefault\.editorconfig

# NOTE: Requires **VS2019 16.3** or later

# All Rules with default severity
# Description: All Rules with default severity. Rules with IsEnabledByDefault = false are disabled.

[*.{cs,vb}]

# CA1000: Do not declare static members on generic types
dotnet_diagnostic.CA1000.severity = suggestion

# CA1001: Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = suggestion

# CA1002: Do not expose generic lists
dotnet_diagnostic.CA1002.severity = suggestion

# CA1003: Use generic event handler instances
dotnet_diagnostic.CA1003.severity = suggestion

# CA1005: Avoid excessive parameters on generic types
dotnet_diagnostic.CA1005.severity = suggestion

# CA1008: Enums should have zero value
dotnet_diagnostic.CA1008.severity = suggestion

# CA1010: Generic interface should also be implemented
dotnet_diagnostic.CA1010.severity = suggestion

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = suggestion

# CA1014: Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1014.severity = suggestion

# CA1016: Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = suggestion

# CA1017: Mark assemblies with ComVisible
dotnet_diagnostic.CA1017.severity = suggestion

# CA1018: Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1018.severity = suggestion

# CA1019: Define accessors for attribute arguments
dotnet_diagnostic.CA1019.severity = suggestion

# CA1021: Avoid out parameters
dotnet_diagnostic.CA1021.severity = suggestion

# CA1024: Use properties where appropriate
dotnet_diagnostic.CA1024.severity = suggestion

# CA1027: Mark enums with FlagsAttribute
dotnet_diagnostic.CA1027.severity = suggestion

# CA1028: Enum Storage should be Int32
dotnet_diagnostic.CA1028.severity = suggestion

# CA1030: Use events where appropriate
dotnet_diagnostic.CA1030.severity = suggestion

# CA1031: Do not catch general exception types
dotnet_diagnostic.CA1031.severity = suggestion

# CA1032: Implement standard exception constructors
dotnet_diagnostic.CA1032.severity = suggestion

# CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = suggestion

# CA1034: Nested types should not be visible
dotnet_diagnostic.CA1034.severity = suggestion

# CA1036: Override methods on comparable types
dotnet_diagnostic.CA1036.severity = suggestion

# CA1040: Avoid empty interfaces
dotnet_diagnostic.CA1040.severity = suggestion

# CA1041: Provide ObsoleteAttribute message
dotnet_diagnostic.CA1041.severity = warning

# CA1043: Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1043.severity = suggestion

# CA1044: Properties should not be write only
dotnet_diagnostic.CA1044.severity = suggestion

# CA1045: Do not pass types by reference
dotnet_diagnostic.CA1045.severity = suggestion

# CA1046: Do not overload equality operator on reference types
dotnet_diagnostic.CA1046.severity = suggestion

# CA1047: Do not declare protected member in sealed type
dotnet_diagnostic.CA1047.severity = suggestion

# CA1050: Declare types in namespaces
dotnet_diagnostic.CA1050.severity = suggestion

# CA1051: Do not declare visible instance fields
dotnet_diagnostic.CA1051.severity = suggestion

# CA1052: Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = suggestion

# CA1054: URI-like parameters should not be strings
dotnet_diagnostic.CA1054.severity = suggestion

# CA1055: URI-like return values should not be strings
dotnet_diagnostic.CA1055.severity = suggestion

# CA1056: URI-like properties should not be strings
dotnet_diagnostic.CA1056.severity = suggestion

# CA1058: Types should not extend certain base types
dotnet_diagnostic.CA1058.severity = suggestion

# CA1060: Move pinvokes to native methods class
dotnet_diagnostic.CA1060.severity = suggestion

# CA1061: Do not hide base class methods
dotnet_diagnostic.CA1061.severity = suggestion

# CA1062: Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = suggestion

# CA1063: Implement IDisposable Correctly
dotnet_diagnostic.CA1063.severity = suggestion

# CA1064: Exceptions should be public
dotnet_diagnostic.CA1064.severity = suggestion

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = suggestion

# CA1066: Implement IEquatable when overriding Object.Equals
dotnet_diagnostic.CA1066.severity = suggestion

# CA1067: Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1067.severity = suggestion

# CA1068: CancellationToken parameters must come last
dotnet_diagnostic.CA1068.severity = suggestion

# CA1069: Enums values should not be duplicated
dotnet_diagnostic.CA1069.severity = suggestion

# CA1070: Do not declare event fields as virtual
dotnet_diagnostic.CA1070.severity = suggestion

# CA1200: Avoid using cref tags with a prefix
dotnet_diagnostic.CA1200.severity = suggestion

# CA1303: Do not pass literals as localized parameters
dotnet_diagnostic.CA1303.severity = suggestion

# CA1304: Specify CultureInfo
dotnet_diagnostic.CA1304.severity = suggestion

# CA1305: Specify IFormatProvider
dotnet_diagnostic.CA1305.severity = suggestion

# CA1307: Specify StringComparison for clarity
dotnet_diagnostic.CA1307.severity = suggestion

# CA1308: Normalize strings to uppercase
dotnet_diagnostic.CA1308.severity = suggestion

# CA1309: Use ordinal string comparison
dotnet_diagnostic.CA1309.severity = suggestion

# CA1310: Specify StringComparison for correctness
dotnet_diagnostic.CA1310.severity = suggestion

# CA1401: P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = suggestion

# CA1416: Validate platform compatibility
dotnet_diagnostic.CA1416.severity = warning

# CA1417: Do not use 'OutAttribute' on string parameters for P/Invokes
dotnet_diagnostic.CA1417.severity = warning

# CA1501: Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = suggestion

# CA1502: Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = suggestion

# CA1505: Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = suggestion

# CA1506: Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = suggestion

# CA1507: Use nameof to express symbol names
dotnet_diagnostic.CA1507.severity = suggestion

# CA1508: Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = suggestion

# CA1509: Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1509.severity = suggestion

# CA1700: Do not name enum values 'Reserved'
dotnet_diagnostic.CA1700.severity = suggestion

# CA1707: Identifiers should not contain underscores
dotnet_diagnostic.CA1707.severity = suggestion

# CA1708: Identifiers should differ by more than case
dotnet_diagnostic.CA1708.severity = suggestion

# CA1710: Identifiers should have correct suffix
dotnet_diagnostic.CA1710.severity = suggestion

# CA1711: Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1711.severity = suggestion

# CA1712: Do not prefix enum values with type name
dotnet_diagnostic.CA1712.severity = suggestion

# CA1713: Events should not have 'Before' or 'After' prefix
dotnet_diagnostic.CA1713.severity = suggestion

# CA1715: Identifiers should have correct prefix
dotnet_diagnostic.CA1715.severity = suggestion

# CA1716: Identifiers should not match keywords
dotnet_diagnostic.CA1716.severity = suggestion

# CA1720: Identifier contains type name
dotnet_diagnostic.CA1720.severity = suggestion

# CA1721: Property names should not match get methods
dotnet_diagnostic.CA1721.severity = suggestion

# CA1724: Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = suggestion

# CA1725: Parameter names should match base declaration
dotnet_diagnostic.CA1725.severity = warning

# CA1801: Review unused parameters
dotnet_diagnostic.CA1801.severity = suggestion

# CA1802: Use literals where appropriate
dotnet_diagnostic.CA1802.severity = suggestion

# CA1805: Do not initialize unnecessarily
dotnet_diagnostic.CA1805.severity = suggestion

# CA1806: Do not ignore method results
dotnet_diagnostic.CA1806.severity = warning

# CA1810: Initialize reference type static fields inline
dotnet_diagnostic.CA1810.severity = suggestion

# CA1812: Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = suggestion

# CA1813: Avoid unsealed attributes
dotnet_diagnostic.CA1813.severity = suggestion

# CA1814: Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1814.severity = suggestion

# CA1815: Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = suggestion

# CA1816: Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1816.severity = suggestion

# CA1819: Properties should not return arrays
dotnet_diagnostic.CA1819.severity = suggestion

# CA1820: Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = suggestion

# CA1821: Remove empty Finalizers
dotnet_diagnostic.CA1821.severity = suggestion

# CA1822: Mark members as static
dotnet_diagnostic.CA1822.severity = suggestion

# CA1823: Avoid unused private fields
dotnet_diagnostic.CA1823.severity = warning

# CA1824: Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1824.severity = suggestion

# CA1825: Avoid zero-length array allocations
dotnet_diagnostic.CA1825.severity = warning

# CA1826: Do not use Enumerable methods on indexable collections
dotnet_diagnostic.CA1826.severity = suggestion

# CA1827: Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1827.severity = suggestion

# CA1828: Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1828.severity = suggestion

# CA1829: Use Length/Count property instead of Count() when available
dotnet_diagnostic.CA1829.severity = warning

# CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1830.severity = suggestion

# CA1831: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1831.severity = warning

# CA1832: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1832.severity = suggestion

# CA1833: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1833.severity = suggestion

# CA1834: Consider using 'StringBuilder.Append(char)' when applicable
dotnet_diagnostic.CA1834.severity = suggestion

# CA1835: Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1835.severity = suggestion

# CA1836: Prefer IsEmpty over Count
dotnet_diagnostic.CA1836.severity = suggestion

# CA1837: Use 'Environment.ProcessId'
dotnet_diagnostic.CA1837.severity = suggestion

# CA1838: Avoid 'StringBuilder' parameters for P/Invokes
dotnet_diagnostic.CA1838.severity = suggestion

# CA2000: Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = suggestion

# CA2002: Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = suggestion

# CA2007: Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = silent

# CA2008: Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2008.severity = suggestion

# CA2009: Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2009.severity = suggestion

# CA2011: Avoid infinite recursion
dotnet_diagnostic.CA2011.severity = suggestion

# CA2012: Use ValueTasks correctly
dotnet_diagnostic.CA2012.severity = suggestion

# CA2013: Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2013.severity = warning

# CA2014: Do not use stackalloc in loops
dotnet_diagnostic.CA2014.severity = warning

# CA2015: Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2015.severity = warning

# CA2016: Forward the 'CancellationToken' parameter to methods that take one
dotnet_diagnostic.CA2016.severity = warning

# CA2100: Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = suggestion

# CA2101: Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = suggestion

# CA2109: Review visible event handlers
dotnet_diagnostic.CA2109.severity = suggestion

# CA2119: Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2119.severity = suggestion

# CA2153: Do Not Catch Corrupted State Exceptions
dotnet_diagnostic.CA2153.severity = suggestion

# CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# CA2201: Do not raise reserved exception types
dotnet_diagnostic.CA2201.severity = suggestion

# CA2207: Initialize value type static fields inline
dotnet_diagnostic.CA2207.severity = suggestion

# CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.CA2208.severity = suggestion

# CA2211: Non-constant fields should not be visible
dotnet_diagnostic.CA2211.severity = suggestion

# CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = suggestion

# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = suggestion

# CA2215: Dispose methods should call base class dispose
dotnet_diagnostic.CA2215.severity = suggestion

# CA2216: Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = suggestion

# CA2217: Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = suggestion

# CA2218: Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2218.severity = suggestion

# CA2219: Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2219.severity = suggestion

# CA2224: Override Equals on overloading operator equals
dotnet_diagnostic.CA2224.severity = suggestion

# CA2225: Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = suggestion

# CA2226: Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = suggestion

# CA2227: Collection properties should be read only
dotnet_diagnostic.CA2227.severity = suggestion

# CA2229: Implement serialization constructors
dotnet_diagnostic.CA2229.severity = suggestion

# CA2231: Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2231.severity = suggestion

# CA2234: Pass system uri objects instead of strings
dotnet_diagnostic.CA2234.severity = suggestion

# CA2235: Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = suggestion

# CA2237: Mark ISerializable types with serializable
dotnet_diagnostic.CA2237.severity = suggestion

# CA2241: Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = suggestion

# CA2242: Test for NaN correctly
dotnet_diagnostic.CA2242.severity = suggestion

# CA2243: Attribute string literals should parse correctly
dotnet_diagnostic.CA2243.severity = suggestion

# CA2244: Do not duplicate indexed element initializations
dotnet_diagnostic.CA2244.severity = suggestion

# CA2245: Do not assign a property to itself
dotnet_diagnostic.CA2245.severity = suggestion

# CA2246: Assigning symbol and its member in the same statement
dotnet_diagnostic.CA2246.severity = suggestion

# CA2247: Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2247.severity = warning

# CA2248: Provide correct 'enum' argument to 'Enum.HasFlag'
dotnet_diagnostic.CA2248.severity = suggestion

# CA2249: Consider using 'string.Contains' instead of 'string.IndexOf'
dotnet_diagnostic.CA2249.severity = suggestion

# CA2300: Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2300.severity = suggestion

# CA2301: Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2301.severity = suggestion

# CA2302: Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2302.severity = suggestion

# CA2305: Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2305.severity = suggestion

# CA2310: Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2310.severity = suggestion

# CA2311: Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2311.severity = suggestion

# CA2312: Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2312.severity = suggestion

# CA2315: Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2315.severity = suggestion

# CA2321: Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2321.severity = suggestion

# CA2322: Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2322.severity = suggestion

# CA2326: Do not use TypeNameHandling values other than suggestion
dotnet_diagnostic.CA2326.severity = suggestion

# CA2327: Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2327.severity = suggestion

# CA2328: Ensure that JsonSerializerSettings are secure
dotnet_diagnostic.CA2328.severity = suggestion

# CA2329: Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2329.severity = suggestion

# CA2330: Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2330.severity = suggestion

# CA2350: Do not use DataTable.ReadXml() with untrusted data
dotnet_diagnostic.CA2350.severity = suggestion

# CA2351: Do not use DataSet.ReadXml() with untrusted data
dotnet_diagnostic.CA2351.severity = suggestion

# CA2352: Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2352.severity = suggestion

# CA2353: Unsafe DataSet or DataTable in serializable type
dotnet_diagnostic.CA2353.severity = suggestion

# CA2354: Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2354.severity = suggestion

# CA2355: Unsafe DataSet or DataTable type found in deserializable object graph
dotnet_diagnostic.CA2355.severity = suggestion

# CA2356: Unsafe DataSet or DataTable type in web deserializable object graph
dotnet_diagnostic.CA2356.severity = suggestion

# CA2361: Ensure auto-generated class containing DataSet.ReadXml() is not used with untrusted data
dotnet_diagnostic.CA2361.severity = suggestion

# CA2362: Unsafe DataSet or DataTable in auto-generated serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2362.severity = suggestion

# CA3001: Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3001.severity = suggestion

# CA3002: Review code for XSS vulnerabilities
dotnet_diagnostic.CA3002.severity = suggestion

# CA3003: Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3003.severity = suggestion

# CA3004: Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3004.severity = suggestion

# CA3005: Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3005.severity = suggestion

# CA3006: Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3006.severity = suggestion

# CA3007: Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3007.severity = suggestion

# CA3008: Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3008.severity = suggestion

# CA3009: Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3009.severity = suggestion

# CA3010: Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3010.severity = suggestion

# CA3011: Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3011.severity = suggestion

# CA3012: Review code for regex injection vulnerabilities
dotnet_diagnostic.CA3012.severity = suggestion

# CA3061: Do Not Add Schema By URL
dotnet_diagnostic.CA3061.severity = suggestion

# CA3075: Insecure DTD processing in XML
dotnet_diagnostic.CA3075.severity = suggestion

# CA3076: Insecure XSLT script processing.
dotnet_diagnostic.CA3076.severity = suggestion

# CA3077: Insecure Processing in API Design, XmlDocument and XmlTextReader
dotnet_diagnostic.CA3077.severity = suggestion

# CA3147: Mark Verb Handlers With Validate Antiforgery Token
dotnet_diagnostic.CA3147.severity = suggestion

# CA5350: Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5350.severity = suggestion

# CA5351: Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = suggestion

# CA5358: Review cipher mode usage with cryptography experts
dotnet_diagnostic.CA5358.severity = suggestion

# CA5359: Do Not Disable Certificate Validation
dotnet_diagnostic.CA5359.severity = suggestion

# CA5360: Do Not Call Dangerous Methods In Deserialization
dotnet_diagnostic.CA5360.severity = suggestion

# CA5361: Do Not Disable SChannel Use of Strong Crypto
dotnet_diagnostic.CA5361.severity = suggestion

# CA5362: Potential reference cycle in deserialized object graph
dotnet_diagnostic.CA5362.severity = suggestion

# CA5363: Do Not Disable Request Validation
dotnet_diagnostic.CA5363.severity = suggestion

# CA5364: Do Not Use Deprecated Security Protocols
dotnet_diagnostic.CA5364.severity = suggestion

# CA5365: Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5365.severity = suggestion

# CA5366: Use XmlReader for 'DataSet.ReadXml()'
dotnet_diagnostic.CA5366.severity = suggestion

# CA5367: Do Not Serialize Types With Pointer Fields
dotnet_diagnostic.CA5367.severity = suggestion

# CA5368: Set ViewStateUserKey For Classes Derived From Page
dotnet_diagnostic.CA5368.severity = suggestion

# CA5369: Use XmlReader for 'XmlSerializer.Deserialize()'
dotnet_diagnostic.CA5369.severity = suggestion

# CA5370: Use XmlReader for XmlValidatingReader constructor
dotnet_diagnostic.CA5370.severity = suggestion

# CA5371: Use XmlReader for 'XmlSchema.Read()'
dotnet_diagnostic.CA5371.severity = suggestion

# CA5372: Use XmlReader for XPathDocument constructor
dotnet_diagnostic.CA5372.severity = suggestion

# CA5373: Do not use obsolete key derivation function
dotnet_diagnostic.CA5373.severity = suggestion

# CA5374: Do Not Use XslTransform
dotnet_diagnostic.CA5374.severity = suggestion

# CA5375: Do Not Use Account Shared Access Signature
dotnet_diagnostic.CA5375.severity = suggestion

# CA5376: Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5376.severity = suggestion

# CA5377: Use Container Level Access Policy
dotnet_diagnostic.CA5377.severity = suggestion

# CA5378: Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5378.severity = suggestion

# CA5379: Ensure Key Derivation Function algorithm is sufficiently strong
dotnet_diagnostic.CA5379.severity = suggestion

# CA5380: Do Not Add Certificates To Root Store
dotnet_diagnostic.CA5380.severity = suggestion

# CA5381: Ensure Certificates Are Not Added To Root Store
dotnet_diagnostic.CA5381.severity = suggestion

# CA5382: Use Secure Cookies In ASP.Net Core
dotnet_diagnostic.CA5382.severity = suggestion

# CA5383: Ensure Use Secure Cookies In ASP.Net Core
dotnet_diagnostic.CA5383.severity = suggestion

# CA5384: Do Not Use Digital Signature Algorithm (DSA)
dotnet_diagnostic.CA5384.severity = suggestion

# CA5385: Use Rivestäº¡hamiræ³¡dleman (RSA) Algorithm With Sufficient Key Size
dotnet_diagnostic.CA5385.severity = suggestion

# CA5386: Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5386.severity = suggestion

# CA5387: Do Not Use Weak Key Derivation Function With Insufficient Iteration Count
dotnet_diagnostic.CA5387.severity = suggestion

# CA5388: Ensure Sufficient Iteration Count When Using Weak Key Derivation Function
dotnet_diagnostic.CA5388.severity = suggestion

# CA5389: Do Not Add Archive Item's Path To The Target File System Path
dotnet_diagnostic.CA5389.severity = suggestion

# CA5390: Do not hard-code encryption key
dotnet_diagnostic.CA5390.severity = suggestion

# CA5391: Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5391.severity = suggestion

# CA5392: Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5392.severity = suggestion

# CA5393: Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5393.severity = suggestion

# CA5394: Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = suggestion

# CA5395: Miss HttpVerb attribute for action methods
dotnet_diagnostic.CA5395.severity = suggestion

# CA5396: Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5396.severity = suggestion

# CA5397: Do not use deprecated SslProtocols values
dotnet_diagnostic.CA5397.severity = suggestion

# CA5398: Avoid hardcoded SslProtocols values
dotnet_diagnostic.CA5398.severity = suggestion

# CA5399: HttpClients should enable certificate revocation list checks
dotnet_diagnostic.CA5399.severity = suggestion

# CA5400: Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5400.severity = suggestion

# CA5401: Do not use CreateEncryptor with non-default IV
dotnet_diagnostic.CA5401.severity = suggestion

# CA5402: Use CreateEncryptor with the default IV 
dotnet_diagnostic.CA5402.severity = suggestion

# CA5403: Do not hard-code certificate
dotnet_diagnostic.CA5403.severity = suggestion

# IL3000: Avoid using accessing Assembly file path when publishing as a single-file
dotnet_diagnostic.IL3000.severity = warning

# IL3001: Avoid using accessing Assembly file path when publishing as a single-file
dotnet_diagnostic.IL3001.severity = warning

# S1481: Unused local variables should be removed
dotnet_diagnostic.S1481.severity = warning
